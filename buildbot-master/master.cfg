# -*- python -*-
# ex: set syntax=python:

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
from buildbot.buildslave import BuildSlave
DSLAVE="debian"
TSLAVE="testing"
USLAVE="ubuntu"
c['slaves'] = [BuildSlave(USLAVE, "pass", max_builds=1),
               BuildSlave(TSLAVE, "pass", max_builds=1),
               BuildSlave(DSLAVE, "pass", max_builds=1),
               ]

# 'slavePortnum' defines the TCP port to listen on for connections from slaves.
# This must match the value configured into the buildslaves (with their
# --master option)
c['slavePortnum'] = 9989

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

from buildbot.changes.gitpoller import GitPoller
c['change_source'] = []
c['change_source'].append(GitPoller(
        repourl='/host-hnet',
        workdir='gitpoller-workdir',
        branch='master',
        pollInterval=10 # in _seconds_ as of buildbot 0.8something
#        pollAtLaunch=True # would be nice but no go.. gnn. next version.
        ))

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.schedulers.forcesched import ForceScheduler
from buildbot.changes import filter
c['schedulers'] = []
BCD = "debian"
BCDC = "debian-clang"
BCT = "testing"
BCTC = "testing-clang"
BCU = "ubuntu"
BCUC = "ubuntu-clang"
c['schedulers'].append(SingleBranchScheduler(
    name="all",
    #change_filter=filter.ChangeFilter(branch='master'),
    branch='master',
    treeStableTimer=None,
    builderNames=[BCD, BCDC, BCT, BCTC, BCU, BCUC]))
c['schedulers'].append(ForceScheduler(
    name="force",
    builderNames=[BCD, BCDC, BCT, BCTC, BCU, BCUC]))

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

from buildbot.process.factory import BuildFactory
from buildbot.steps.source import Git
from buildbot.steps.shell import ShellCommand

base_steps = [
    # check out the source
    #, method="copy" # maintain separate source + build tree
    #, submodules=True # by default, no submodules
    Git(repourl='/host-hnet',
        mode="copy" # depracated - maintain tree at slave, copy
        ),

    # Create host-hnet out of /host-hnet
    ShellCommand(name='local clone',
                 command=["python", "/bbs/gitcloner.py", "/host-hnet"]),

    # Synchronize host-hnet and build versions
    ShellCommand(name='checkout version from clone',
                 command=['sh', '-c',
                          '(cd host-hnet && git checkout `cd .. && git rev-parse HEAD`)']),
]

build_cmd=["make", "-j", "9", "-k", '-C', 'host-hnet/component']
check_cmd=["make", '-C', 'host-hnet/component', 'check']
default_steps = base_steps[:]
default_steps.append(ShellCommand(name='build',
                                  command=build_cmd, haltOnFailure=True))
default_steps.append(ShellCommand(name='check',
                                  command=check_cmd))
default_factory = BuildFactory(default_steps)

clang_steps = base_steps[:]
clang_steps.append(ShellCommand(name='build',
                                command=build_cmd, haltOnFailure=True,
                                env={'CC':'clang'}))
clang_steps.append(ShellCommand(name='check',
                                command=check_cmd,
                                env={'CC':'clang'}))
clang_factory = BuildFactory(clang_steps)

# run 'make' inside component subdirectory

from buildbot.config import BuilderConfig

c['builders'] = []
# Debian
c['builders'].append(
    BuilderConfig(name=BCD,
      slavenames=[DSLAVE],
      factory=default_factory))
c['builders'].append(
    BuilderConfig(name=BCDC,
      slavenames=[DSLAVE],
      factory=clang_factory))

# Testing
c['builders'].append(
    BuilderConfig(name=BCT,
      slavenames=[DSLAVE],
      factory=default_factory))
c['builders'].append(
    BuilderConfig(name=BCTC,
      slavenames=[DSLAVE],
      factory=clang_factory))

# Ubuntu
c['builders'].append(
    BuilderConfig(name=BCU,
      slavenames=[USLAVE],
      factory=default_factory))
c['builders'].append(
    BuilderConfig(name=BCUC,
      slavenames=[USLAVE],
      factory=clang_factory))

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz, auth

authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    #auth=auth.BasicAuth([("hnet","pass")]),
    gracefulShutdown = False,
    forceBuild = True, #'auth', # use this to test your slave once it is set up
    forceAllBuilds = True,
    pingBuilder = True,
    stopBuild = True,
    stopAllBuilds = True,
    cancelPendingBuild = True,
)
c['status'].append(html.WebStatus(http_port=8010, authz=authz_cfg))

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "Homenet"
c['titleURL'] = "http://www.homewrt.org"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://localhost:8010/"

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
